composer global require "laravel/installer"
laravel new laravel
php artisan make:auth
php artisan migrate
php artisan migrate:refresh

https://github.com/fzaninotto/Faker
php artisan tinker
$faker = Faker\Factory
$faker = $faker::create('pl_PL')
$faker->name
//generuje polskie falszywe dane

php artisan make:seeder UsersTableSeeder
str_slug() //zamienia Marcin Prus na marcin-prus
php artisan db:seed
php artisan migrate:refresh --seed

dobrym nawykiem jest nazywac controllery w liczbnie mnogiej a model w liczbie pojedynczej
php artisan make:controller UsersController --resource
php artisan route:list

alt+insert aby wstawic lorem ipsum
tab = aby wstawic rozne znaczniki html
<div class="col-md-3 col-md-offset-1"> //odsuniecie z lewej o 1
php artisan storage:link
php artisan migrate:refresh --seed

http://image.intervention.io/ biblioteka do obrobki zdjec
composer require intervention/image
php artisan vendor:publish --provider="Intervention\Image\ImageServiceProviderLaravel5"
php artisan make:controller ImagesController

https://randomuser.me/documentation
php artisan migrate:refresh --seed

http://iconfinder.com/ //strona z darmowymi ikonkami

php artisan make:middleware CheckUserPermission //nazwy middelwarow najlepiej czasownik+rzeczownik //w pliku kernel.php ładujemy middleware

php artisan make:controller SearchController
php artisan make:controller FriendsController --resource
php artisan make:model Friend --migration
wazne jest aby uzywac odpowiedniego nazwewnictwa kluczy obcych wtedy eloquent sam wie jakie sa relacje i nie trzeba tego recznie definiowac
php artisan migrate:refresh --seed

//helpery mozna uzywac w kazdym widoku, kontrolerze
stworzylismy plik helpers.php i dodamy go do autoload w composer.json
dodalismy "files": [
            "app/helpers.php"
        ]
	do composer.json
composer update

php artisan migrate:refresh --seed

php artisan make:model Post --migration
php artisan migrate:refresh --seed
php artisan make:controller PostsController --resource
php artisan route:list
php artisan make:middleware CheckPostPermission
php artisan make:controller WallsController
php artisan migrate:refresh --seed

php artisan make:controller CommentsController --resource
php artisan make:model Comment --migration
php artisan migrate:refresh --seed
php artisan make:middleware CheckCommentPermission
php artisan migrate:refresh --seed

php artisan make:model Role --migration
php artisan make:model Like --migration
php artisan make:controller LikesController
php artisan migrate:refresh --seed

php artisan make:notification FriendRequest

php artisan vendor:publish
php artisan notification:table //tworzy tabele do notyfikacji

php artisan migrate:refresh --seed

php artisan make:controller NotificationsController

php artisan make:notification FriendRequestAccepted

php artisan make:notification PostCommented

php artisan make:notification Liked

mailtrap.io

======dodatkowe wskazkowki==========
Podczas tworzenia postu , zapisywana jest godzina, ale nie aktualna a 2 godziny wczesnie. Zamiast 12:12 jest 10:12 
W pliku config/app.php zmień timezone z UTC na Europe/Warsaw 
======
Mam pytanie czy laravel ma cache na pliki view , bo skopiowałem pliki z kursu wiev o laravel pokazuje stare w przeglądarce 
Tak, laravel cache'uje widoki.
Możesz użyć polecenia artisana do wyczyszczenia cache'a
php artisan view:clear 
======
A jak zastosować paginacje dla danych pobieranych na podstawie relacji, bo coś nie mogę do tego dojść? 
Tutaj masz gotowe rozwiązanie: http://stackoverflow.com/a/25500958
======
Auth::check() //sprawdza czy uzytkownik jest zalogowany
Auth::id() // id zalogowanego uzytkownika, jesli nie jest zwraca null
======
Zamiast odnosić się ciągle do klasy Auth::class wygodniej jest użyć helpera zapis auth()->id() lub auth()->check() , auth()->user()->name
======
nasluchiwanie polaczenin do bazy danych

db listen query

w App\Providers AppServiceProvider.php
use Illuminate\Support\Facades\DB;

i w metodzie  boot()
DB::listen(function ($query){
            var_dump($query->sql."<br><br>");
        });
eager loading //umozliwia optymalizowac
======
php artisan vendor:publish //publikuje np. paginacje do view jesli byla uzyta
======
{{ }} jest escapowane, więc jeśli chcemy pisać tagi HTML w Blade, (zgodnie ze specyfikacją: https://laravel.com/docs/5.3/blade ) musimy użyć {!! !!} zamiast {{ }} 
======
DRY = Don't repeat yourself
